{{doNotEditWarning}}

# Atlas

[![Build Status](https://travis-ci.org/rhys-vdw/atlas.svg?branch=master)](https://travis-ci.org/rhys-vdw/atlas)
[![codecov](https://codecov.io/gh/rhys-vdw/atlas/branch/master/graph/badge.svg)](https://codecov.io/gh/rhys-vdw/atlas)
[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/rhys-vdw/atlas?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

Data mapper implementation for JavaScript. Atlas provides a fluent interface for manipulating a relational database.

Atlas uses [`Knex.js`](http://www.knexjs.org) to build and execute queries.

**Atlas is not yet released**

Atlas is thoroughly tested, but barely used. The API may change (probably not dramatically).  Posting feedback and questions to the issue tracker is encouraged.

Currently Atlas is only tested with PostgreSQL, but Knex's portability means that it should (ultimately) work with any Knex supported DBMS.


## Installation

Not yet on npm, install direct from GitHub:

```console
$ npm install rhys-vdw/atlas --save
$ npm install knex --save
```

## Configuration

```js
// atlas-instance.js

import Knex from 'knex';
import Atlas from 'atlas';

const knex = Knex({
  client: 'postgres',
  connection: {
    database: 'my_database',
    user: 'user'
  }
});

export default Atlas({ knex });
```

## Usage

Use configured [`Atlas`](#Atlas) instance.

```js
import atlas from './atlas-instance';

// Extend from the base mapper.
const Users = atlas('Mapper').table('users');

// Print out a list of all users' names.
Users.fetch().then(users => {
  console.log(users.map(u => u.name).join(', '))
});


// Find two users and then update an attribute.
Users.find(1, 2).then(users =>
  return Users.target(found).updateAll({ has_been_seen: true })
);

// Delete some rows by ID or record.
return Users.destroy(4, { id: 6 });
// delete from users where id in (4, 6)
```

Records come back as plain objects. Example [`fetch`](#Mapper+fetch) response:

```js
[
  { id: 1, name: 'Annie', is_admin: true },
  { id: 2, name: 'Beth', is_admin: false },
  { id: 3, name: 'Chris', is_admin: false }
]
```

Specialize an existing mapper target a subset of rows:

```js
const Admins = Users.where('is_admin', true);

Admins.fetch().then(printAdminList);

Admins.find(3).then(admin => {
  console.log(`${admin.name} is an admin!`);
}).catch(NotFoundError, err => {
  console.error(`No admin with ID 3!`);
});
```

~Works when creating models too:~
_This has not yet been implemented ([issue](https://github.com/rhys-vdw/atlas/issues/69))_

```js
const heath = Admins.forge({ name: 'Heath' });
// { name: 'Heath', is_admin: true };

return Admins.save({ id: 4, name: 'Nigel' }, { name: 'Heath' });
// update users set name = 'Nigel', is_admin = true where id = 4;
// insert into users (name, is_admin) values ('Heath', true);
```

Defining a schema with relations:

```js
const Groups = Mapper.table('groups').relations({
  users() { return this.belongsToMany(Users) },
  owner() { return this.hasOne(Users, { selfRef: 'owner_id' }) }
});

// More complex mapper for `users` table.
const Users = Mapper.table('users').relations({
  groups()      { return this.belongsToMany(Groups) }
  ownedGroups() { return this.hasMany(Groups, { otherRef: 'owner_id' }) },
  posts()       { return this.hasMany(Posts, { otherRef: 'author_id' }) },
  lastPost()    { return this.hasOne(Posts.orderBy('created_at', 'desc')) },
});

const Posts = Mapper.table('posts').relations({
  author() { return this.hasOne(Users, { selfRef: 'author_id' }) }
});
```

Now eager loading those relations:

```js
return Users.with('groups', 'lastLogin', 'posts')
  .findBy('name', 'Annie')
  .then(annie => { console.log(util.inspect(annie)); });
```

Relations get keyed by name in the returned record, eg:

```js
{
  id: 20,
  name: 'Annie',
  lastLogin: { user_id: 1, created_at: '2015-11-26' },
  groups: [
    { id: 20, name: 'Super Friends', _pivot_user_id: 1 },
  ],
  posts: [
    { id: 120, author_id: 1, created_at: '2015-11-24',
      title: 'Hi', message: 'Hey there!' },
    { id: 110, author_id: 1, created_at: '2015-10-30',
      title: 'Re: Greeting', message: 'Yo', }
  ]
}
```

{{>main}}
